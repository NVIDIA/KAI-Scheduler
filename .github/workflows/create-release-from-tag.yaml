# Copyright 2025 NVIDIA CORPORATION
# SPDX-License-Identifier: Apache-2.0

name: Create Release from Tag

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract changelog and create release
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const version = process.env.VERSION;
            console.log(`Creating release for version: ${version}`);
            
            // Extract unreleased content using our script
            let releaseNotes;
            try {
              releaseNotes = execSync('./.github/scripts/update-changelog.sh extract', { encoding: 'utf-8' }).trim();
              console.log('Extracted release notes:');
              console.log(releaseNotes);
            } catch (error) {
              core.setFailed(`Failed to extract changelog: ${error.message}`);
              return;
            }
            
            // Move unreleased to versioned section
            try {
              execSync(`./.github/scripts/update-changelog.sh move "${version}"`, { encoding: 'utf-8', stdio: 'inherit' });
              console.log('✅ Moved [Unreleased] to versioned section');
            } catch (error) {
              core.setFailed(`Failed to update changelog: ${error.message}`);
              return;
            }
            
            // Create GitHub release
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: version,
                body: releaseNotes,
                draft: false,
                prerelease: false
              });
              console.log(`✅ Created release: ${release.data.html_url}`);
            } catch (error) {
              core.setFailed(`Failed to create release: ${error.message}`);
              return;
            }
            
            // Commit updated changelog back to main
            try {
              execSync('git config user.name "github-actions[bot]"');
              execSync('git config user.email "github-actions[bot]@users.noreply.github.com"');
              execSync('git add CHANGELOG.md');
              execSync(`git commit -m "chore: update changelog for release ${version}"`);
              execSync('git push origin HEAD:main');
              console.log('✅ Committed changelog update to main');
            } catch (error) {
              core.setFailed(`Failed to commit changelog: ${error.message}`);
              return;
            }

