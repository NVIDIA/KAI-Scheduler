// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/binder/plugins/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/binder/plugins/interface.go -destination=pkg/binder/plugins/mock/plugins_mock.go -package=mock_plugins
//

// Package mock_plugins is a generated GoMock package.
package mock_plugins

import (
	context "context"
	reflect "reflect"

	v1alpha2 "github.com/NVIDIA/KAI-scheduler/pkg/apis/scheduling/v1alpha2"
	state "github.com/NVIDIA/KAI-scheduler/pkg/binder/plugins/state"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
	isgomock struct{}
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPlugin)(nil).Name))
}

// PostBind mocks base method.
func (m *MockPlugin) PostBind(ctx context.Context, pod *v1.Pod, node *v1.Node, bindRequest *v1alpha2.BindRequest, state *state.BindingState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostBind", ctx, pod, node, bindRequest, state)
}

// PostBind indicates an expected call of PostBind.
func (mr *MockPluginMockRecorder) PostBind(ctx, pod, node, bindRequest, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBind", reflect.TypeOf((*MockPlugin)(nil).PostBind), ctx, pod, node, bindRequest, state)
}

// PreBind mocks base method.
func (m *MockPlugin) PreBind(ctx context.Context, pod *v1.Pod, node *v1.Node, bindRequest *v1alpha2.BindRequest, state *state.BindingState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreBind", ctx, pod, node, bindRequest, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreBind indicates an expected call of PreBind.
func (mr *MockPluginMockRecorder) PreBind(ctx, pod, node, bindRequest, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreBind", reflect.TypeOf((*MockPlugin)(nil).PreBind), ctx, pod, node, bindRequest, state)
}
