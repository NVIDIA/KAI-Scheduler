// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/cache/cluster_info/data_lister/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/scheduler/cache/cluster_info/data_lister/interface.go -destination=pkg/scheduler/cache/cluster_info/data_lister/data_lister_mock.go -package=data_lister
//

// Package data_lister is a generated GoMock package.
package data_lister

import (
	reflect "reflect"

	v1alpha2 "github.com/NVIDIA/KAI-scheduler/pkg/apis/scheduling/v1alpha2"
	v2 "github.com/NVIDIA/KAI-scheduler/pkg/apis/scheduling/v2"
	v2alpha2 "github.com/NVIDIA/KAI-scheduler/pkg/apis/scheduling/v2alpha2"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/scheduling/v1"
	v11 "k8s.io/api/storage/v1"
	v1alpha1 "sigs.k8s.io/kueue/apis/kueue/v1alpha1"
)

// MockDataLister is a mock of DataLister interface.
type MockDataLister struct {
	ctrl     *gomock.Controller
	recorder *MockDataListerMockRecorder
	isgomock struct{}
}

// MockDataListerMockRecorder is the mock recorder for MockDataLister.
type MockDataListerMockRecorder struct {
	mock *MockDataLister
}

// NewMockDataLister creates a new mock instance.
func NewMockDataLister(ctrl *gomock.Controller) *MockDataLister {
	mock := &MockDataLister{ctrl: ctrl}
	mock.recorder = &MockDataListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLister) EXPECT() *MockDataListerMockRecorder {
	return m.recorder
}

// GetPriorityClassByName mocks base method.
func (m *MockDataLister) GetPriorityClassByName(name string) (*v10.PriorityClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriorityClassByName", name)
	ret0, _ := ret[0].(*v10.PriorityClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriorityClassByName indicates an expected call of GetPriorityClassByName.
func (mr *MockDataListerMockRecorder) GetPriorityClassByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriorityClassByName", reflect.TypeOf((*MockDataLister)(nil).GetPriorityClassByName), name)
}

// ListBindRequests mocks base method.
func (m *MockDataLister) ListBindRequests() ([]*v1alpha2.BindRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBindRequests")
	ret0, _ := ret[0].([]*v1alpha2.BindRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBindRequests indicates an expected call of ListBindRequests.
func (mr *MockDataListerMockRecorder) ListBindRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBindRequests", reflect.TypeOf((*MockDataLister)(nil).ListBindRequests))
}

// ListCSIDrivers mocks base method.
func (m *MockDataLister) ListCSIDrivers() ([]*v11.CSIDriver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCSIDrivers")
	ret0, _ := ret[0].([]*v11.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCSIDrivers indicates an expected call of ListCSIDrivers.
func (mr *MockDataListerMockRecorder) ListCSIDrivers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCSIDrivers", reflect.TypeOf((*MockDataLister)(nil).ListCSIDrivers))
}

// ListCSIStorageCapacities mocks base method.
func (m *MockDataLister) ListCSIStorageCapacities() ([]*v11.CSIStorageCapacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCSIStorageCapacities")
	ret0, _ := ret[0].([]*v11.CSIStorageCapacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCSIStorageCapacities indicates an expected call of ListCSIStorageCapacities.
func (mr *MockDataListerMockRecorder) ListCSIStorageCapacities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCSIStorageCapacities", reflect.TypeOf((*MockDataLister)(nil).ListCSIStorageCapacities))
}

// ListConfigMaps mocks base method.
func (m *MockDataLister) ListConfigMaps() ([]*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigMaps")
	ret0, _ := ret[0].([]*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigMaps indicates an expected call of ListConfigMaps.
func (mr *MockDataListerMockRecorder) ListConfigMaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigMaps", reflect.TypeOf((*MockDataLister)(nil).ListConfigMaps))
}

// ListNodes mocks base method.
func (m *MockDataLister) ListNodes() ([]*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].([]*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockDataListerMockRecorder) ListNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockDataLister)(nil).ListNodes))
}

// ListPersistentVolumeClaims mocks base method.
func (m *MockDataLister) ListPersistentVolumeClaims() ([]*v1.PersistentVolumeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPersistentVolumeClaims")
	ret0, _ := ret[0].([]*v1.PersistentVolumeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersistentVolumeClaims indicates an expected call of ListPersistentVolumeClaims.
func (mr *MockDataListerMockRecorder) ListPersistentVolumeClaims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersistentVolumeClaims", reflect.TypeOf((*MockDataLister)(nil).ListPersistentVolumeClaims))
}

// ListPodByIndex mocks base method.
func (m *MockDataLister) ListPodByIndex(index, value string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodByIndex", index, value)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodByIndex indicates an expected call of ListPodByIndex.
func (mr *MockDataListerMockRecorder) ListPodByIndex(index, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodByIndex", reflect.TypeOf((*MockDataLister)(nil).ListPodByIndex), index, value)
}

// ListPodGroups mocks base method.
func (m *MockDataLister) ListPodGroups() ([]*v2alpha2.PodGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodGroups")
	ret0, _ := ret[0].([]*v2alpha2.PodGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodGroups indicates an expected call of ListPodGroups.
func (mr *MockDataListerMockRecorder) ListPodGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodGroups", reflect.TypeOf((*MockDataLister)(nil).ListPodGroups))
}

// ListPods mocks base method.
func (m *MockDataLister) ListPods() ([]*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPods")
	ret0, _ := ret[0].([]*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods.
func (mr *MockDataListerMockRecorder) ListPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockDataLister)(nil).ListPods))
}

// ListPriorityClasses mocks base method.
func (m *MockDataLister) ListPriorityClasses() ([]*v10.PriorityClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPriorityClasses")
	ret0, _ := ret[0].([]*v10.PriorityClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPriorityClasses indicates an expected call of ListPriorityClasses.
func (mr *MockDataListerMockRecorder) ListPriorityClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPriorityClasses", reflect.TypeOf((*MockDataLister)(nil).ListPriorityClasses))
}

// ListQueues mocks base method.
func (m *MockDataLister) ListQueues() ([]*v2.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueues")
	ret0, _ := ret[0].([]*v2.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueues indicates an expected call of ListQueues.
func (mr *MockDataListerMockRecorder) ListQueues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueues", reflect.TypeOf((*MockDataLister)(nil).ListQueues))
}

// ListStorageClasses mocks base method.
func (m *MockDataLister) ListStorageClasses() ([]*v11.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageClasses")
	ret0, _ := ret[0].([]*v11.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageClasses indicates an expected call of ListStorageClasses.
func (mr *MockDataListerMockRecorder) ListStorageClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageClasses", reflect.TypeOf((*MockDataLister)(nil).ListStorageClasses))
}

// ListTopologies mocks base method.
func (m *MockDataLister) ListTopologies() ([]*v1alpha1.Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopologies")
	ret0, _ := ret[0].([]*v1alpha1.Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopologies indicates an expected call of ListTopologies.
func (mr *MockDataListerMockRecorder) ListTopologies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopologies", reflect.TypeOf((*MockDataLister)(nil).ListTopologies))
}
