// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/cache/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/scheduler/cache/interface.go -destination=pkg/scheduler/cache/cache_mock.go -package=cache
//

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	api "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/api"
	eviction_info "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/api/eviction_info"
	pod_info "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/api/pod_info"
	podgroup_info "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/api/podgroup_info"
	data_lister "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/cache/cluster_info/data_lister"
	plugins "github.com/NVIDIA/KAI-scheduler/pkg/scheduler/k8s_internal/plugins"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	informers "k8s.io/client-go/informers"
	kubernetes "k8s.io/client-go/kubernetes"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockCache) Bind(podInfo *pod_info.PodInfo, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", podInfo, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockCacheMockRecorder) Bind(podInfo, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockCache)(nil).Bind), podInfo, hostname)
}

// Evict mocks base method.
func (m *MockCache) Evict(ssnPod *v1.Pod, job *podgroup_info.PodGroupInfo, evictionMetadata eviction_info.EvictionMetadata, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", ssnPod, job, evictionMetadata, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockCacheMockRecorder) Evict(ssnPod, job, evictionMetadata, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockCache)(nil).Evict), ssnPod, job, evictionMetadata, message)
}

// GetDataLister mocks base method.
func (m *MockCache) GetDataLister() data_lister.DataLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLister")
	ret0, _ := ret[0].(data_lister.DataLister)
	return ret0
}

// GetDataLister indicates an expected call of GetDataLister.
func (mr *MockCacheMockRecorder) GetDataLister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLister", reflect.TypeOf((*MockCache)(nil).GetDataLister))
}

// InternalK8sPlugins mocks base method.
func (m *MockCache) InternalK8sPlugins() *plugins.K8sPlugins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalK8sPlugins")
	ret0, _ := ret[0].(*plugins.K8sPlugins)
	return ret0
}

// InternalK8sPlugins indicates an expected call of InternalK8sPlugins.
func (mr *MockCacheMockRecorder) InternalK8sPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalK8sPlugins", reflect.TypeOf((*MockCache)(nil).InternalK8sPlugins))
}

// KubeClient mocks base method.
func (m *MockCache) KubeClient() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeClient")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// KubeClient indicates an expected call of KubeClient.
func (mr *MockCacheMockRecorder) KubeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeClient", reflect.TypeOf((*MockCache)(nil).KubeClient))
}

// KubeInformerFactory mocks base method.
func (m *MockCache) KubeInformerFactory() informers.SharedInformerFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeInformerFactory")
	ret0, _ := ret[0].(informers.SharedInformerFactory)
	return ret0
}

// KubeInformerFactory indicates an expected call of KubeInformerFactory.
func (mr *MockCacheMockRecorder) KubeInformerFactory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeInformerFactory", reflect.TypeOf((*MockCache)(nil).KubeInformerFactory))
}

// RecordJobStatusEvent mocks base method.
func (m *MockCache) RecordJobStatusEvent(job *podgroup_info.PodGroupInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordJobStatusEvent", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordJobStatusEvent indicates an expected call of RecordJobStatusEvent.
func (mr *MockCacheMockRecorder) RecordJobStatusEvent(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordJobStatusEvent", reflect.TypeOf((*MockCache)(nil).RecordJobStatusEvent), job)
}

// Run mocks base method.
func (m *MockCache) Run(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", stopCh)
}

// Run indicates an expected call of Run.
func (mr *MockCacheMockRecorder) Run(stopCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCache)(nil).Run), stopCh)
}

// Snapshot mocks base method.
func (m *MockCache) Snapshot() (*api.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(*api.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockCacheMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockCache)(nil).Snapshot))
}

// SnapshotSharedLister mocks base method.
func (m *MockCache) SnapshotSharedLister() framework.NodeInfoLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotSharedLister")
	ret0, _ := ret[0].(framework.NodeInfoLister)
	return ret0
}

// SnapshotSharedLister indicates an expected call of SnapshotSharedLister.
func (mr *MockCacheMockRecorder) SnapshotSharedLister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotSharedLister", reflect.TypeOf((*MockCache)(nil).SnapshotSharedLister))
}

// TaskPipelined mocks base method.
func (m *MockCache) TaskPipelined(task *pod_info.PodInfo, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskPipelined", task, message)
}

// TaskPipelined indicates an expected call of TaskPipelined.
func (mr *MockCacheMockRecorder) TaskPipelined(task, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskPipelined", reflect.TypeOf((*MockCache)(nil).TaskPipelined), task, message)
}

// WaitForCacheSync mocks base method.
func (m *MockCache) WaitForCacheSync(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForCacheSync", stopCh)
}

// WaitForCacheSync indicates an expected call of WaitForCacheSync.
func (mr *MockCacheMockRecorder) WaitForCacheSync(stopCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCacheSync", reflect.TypeOf((*MockCache)(nil).WaitForCacheSync), stopCh)
}

// WaitForWorkers mocks base method.
func (m *MockCache) WaitForWorkers(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForWorkers", stopCh)
}

// WaitForWorkers indicates an expected call of WaitForWorkers.
func (mr *MockCacheMockRecorder) WaitForWorkers(stopCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForWorkers", reflect.TypeOf((*MockCache)(nil).WaitForWorkers), stopCh)
}
