//go:build !ignore_autogenerated

/*
Copyright 2025 NVIDIA CORPORATION
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/admission"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/binder"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/node_scale_adjuster"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/pod_group_controller"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/pod_grouper"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/prometheus"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/queue_controller"
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/scheduler"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Config) DeepCopyInto(out *Config) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Config.
func (in *Config) DeepCopy() *Config {
	if in == nil {
		return nil
	}
	out := new(Config)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Config) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigList) DeepCopyInto(out *ConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Config, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigList.
func (in *ConfigList) DeepCopy() *ConfigList {
	if in == nil {
		return nil
	}
	out := new(ConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigSpec) DeepCopyInto(out *ConfigSpec) {
	*out = *in
	if in.Global != nil {
		in, out := &in.Global, &out.Global
		*out = new(GlobalConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PodGrouper != nil {
		in, out := &in.PodGrouper, &out.PodGrouper
		*out = new(pod_grouper.PodGrouper)
		(*in).DeepCopyInto(*out)
	}
	if in.Binder != nil {
		in, out := &in.Binder, &out.Binder
		*out = new(binder.Binder)
		(*in).DeepCopyInto(*out)
	}
	if in.Admission != nil {
		in, out := &in.Admission, &out.Admission
		*out = new(admission.Admission)
		(*in).DeepCopyInto(*out)
	}
	if in.Scheduler != nil {
		in, out := &in.Scheduler, &out.Scheduler
		*out = new(scheduler.Scheduler)
		(*in).DeepCopyInto(*out)
	}
	if in.QueueController != nil {
		in, out := &in.QueueController, &out.QueueController
		*out = new(queue_controller.QueueController)
		(*in).DeepCopyInto(*out)
	}
	if in.PodGroupController != nil {
		in, out := &in.PodGroupController, &out.PodGroupController
		*out = new(pod_group_controller.PodGroupController)
		(*in).DeepCopyInto(*out)
	}
	if in.NodeScaleAdjuster != nil {
		in, out := &in.NodeScaleAdjuster, &out.NodeScaleAdjuster
		*out = new(node_scale_adjuster.NodeScaleAdjuster)
		(*in).DeepCopyInto(*out)
	}
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(prometheus.Prometheus)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigSpec.
func (in *ConfigSpec) DeepCopy() *ConfigSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigStatus) DeepCopyInto(out *ConfigStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigStatus.
func (in *ConfigStatus) DeepCopy() *ConfigStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Connection) DeepCopyInto(out *Connection) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.AuthSecretName != nil {
		in, out := &in.AuthSecretName, &out.AuthSecretName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Connection.
func (in *Connection) DeepCopy() *Connection {
	if in == nil {
		return nil
	}
	out := new(Connection)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalConfig) DeepCopyInto(out *GlobalConfig) {
	*out = *in
	if in.Openshift != nil {
		in, out := &in.Openshift, &out.Openshift
		*out = new(bool)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(corev1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(corev1.SecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]corev1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DaemonsetsTolerations != nil {
		in, out := &in.DaemonsetsTolerations, &out.DaemonsetsTolerations
		*out = make([]corev1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReplicaCount != nil {
		in, out := &in.ReplicaCount, &out.ReplicaCount
		*out = new(int32)
		**out = **in
	}
	if in.QueueLabelKey != nil {
		in, out := &in.QueueLabelKey, &out.QueueLabelKey
		*out = new(string)
		**out = **in
	}
	if in.SchedulerName != nil {
		in, out := &in.SchedulerName, &out.SchedulerName
		*out = new(string)
		**out = **in
	}
	if in.NodePoolLabelKey != nil {
		in, out := &in.NodePoolLabelKey, &out.NodePoolLabelKey
		*out = new(string)
		**out = **in
	}
	if in.NamespaceLabelSelector != nil {
		in, out := &in.NamespaceLabelSelector, &out.NamespaceLabelSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PodLabelSelector != nil {
		in, out := &in.PodLabelSelector, &out.PodLabelSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PrometheusEnabled != nil {
		in, out := &in.PrometheusEnabled, &out.PrometheusEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ExternalTSDBConnection != nil {
		in, out := &in.ExternalTSDBConnection, &out.ExternalTSDBConnection
		*out = new(Connection)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalConfig.
func (in *GlobalConfig) DeepCopy() *GlobalConfig {
	if in == nil {
		return nil
	}
	out := new(GlobalConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MinRuntime) DeepCopyInto(out *MinRuntime) {
	*out = *in
	if in.PreemptMinRuntime != nil {
		in, out := &in.PreemptMinRuntime, &out.PreemptMinRuntime
		*out = new(string)
		**out = **in
	}
	if in.ReclaimMinRuntime != nil {
		in, out := &in.ReclaimMinRuntime, &out.ReclaimMinRuntime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MinRuntime.
func (in *MinRuntime) DeepCopy() *MinRuntime {
	if in == nil {
		return nil
	}
	out := new(MinRuntime)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PlacementStrategy) DeepCopyInto(out *PlacementStrategy) {
	*out = *in
	if in.GPU != nil {
		in, out := &in.GPU, &out.GPU
		*out = new(string)
		**out = **in
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PlacementStrategy.
func (in *PlacementStrategy) DeepCopy() *PlacementStrategy {
	if in == nil {
		return nil
	}
	out := new(PlacementStrategy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingShard) DeepCopyInto(out *SchedulingShard) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingShard.
func (in *SchedulingShard) DeepCopy() *SchedulingShard {
	if in == nil {
		return nil
	}
	out := new(SchedulingShard)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SchedulingShard) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingShardList) DeepCopyInto(out *SchedulingShardList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SchedulingShard, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingShardList.
func (in *SchedulingShardList) DeepCopy() *SchedulingShardList {
	if in == nil {
		return nil
	}
	out := new(SchedulingShardList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SchedulingShardList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingShardSpec) DeepCopyInto(out *SchedulingShardSpec) {
	*out = *in
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PlacementStrategy != nil {
		in, out := &in.PlacementStrategy, &out.PlacementStrategy
		*out = new(PlacementStrategy)
		(*in).DeepCopyInto(*out)
	}
	if in.QueueDepthPerAction != nil {
		in, out := &in.QueueDepthPerAction, &out.QueueDepthPerAction
		*out = make(map[string]int, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MinRuntime != nil {
		in, out := &in.MinRuntime, &out.MinRuntime
		*out = new(MinRuntime)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingShardSpec.
func (in *SchedulingShardSpec) DeepCopy() *SchedulingShardSpec {
	if in == nil {
		return nil
	}
	out := new(SchedulingShardSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulingShardStatus) DeepCopyInto(out *SchedulingShardStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulingShardStatus.
func (in *SchedulingShardStatus) DeepCopy() *SchedulingShardStatus {
	if in == nil {
		return nil
	}
	out := new(SchedulingShardStatus)
	in.DeepCopyInto(out)
	return out
}
