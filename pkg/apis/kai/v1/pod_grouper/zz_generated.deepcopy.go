//go:build !ignore_autogenerated

/*
Copyright 2025 NVIDIA CORPORATION
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by controller-gen. DO NOT EDIT.

package pod_grouper

import (
	"github.com/NVIDIA/KAI-scheduler/pkg/apis/kai/v1/common"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Args) DeepCopyInto(out *Args) {
	*out = *in
	if in.GangScheduleKnative != nil {
		in, out := &in.GangScheduleKnative, &out.GangScheduleKnative
		*out = new(bool)
		**out = **in
	}
	if in.DefaultPrioritiesConfigMapName != nil {
		in, out := &in.DefaultPrioritiesConfigMapName, &out.DefaultPrioritiesConfigMapName
		*out = new(string)
		**out = **in
	}
	if in.DefaultPrioritiesConfigMapNamespace != nil {
		in, out := &in.DefaultPrioritiesConfigMapNamespace, &out.DefaultPrioritiesConfigMapNamespace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Args.
func (in *Args) DeepCopy() *Args {
	if in == nil {
		return nil
	}
	out := new(Args)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodGrouper) DeepCopyInto(out *PodGrouper) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(common.Service)
		(*in).DeepCopyInto(*out)
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = new(Args)
		(*in).DeepCopyInto(*out)
	}
	if in.K8sClientConfig != nil {
		in, out := &in.K8sClientConfig, &out.K8sClientConfig
		*out = new(common.K8sClientConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxConcurrentReconciles != nil {
		in, out := &in.MaxConcurrentReconciles, &out.MaxConcurrentReconciles
		*out = new(int)
		**out = **in
	}
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodGrouper.
func (in *PodGrouper) DeepCopy() *PodGrouper {
	if in == nil {
		return nil
	}
	out := new(PodGrouper)
	in.DeepCopyInto(out)
	return out
}
